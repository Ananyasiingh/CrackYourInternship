//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    
    int min_key(int key[], bool mstSet[], int V){
        int min = INT_MAX;
        int min_index;
        
        for (int v = 0; v < V; v++)
            if (mstSet[v] == false && key[v] < min)
                min = key[v], min_index = v;

        return min_index;
        
        
    }
    
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        int key[V]; //sab infinite;
        int parent[V];
        bool mstSet[V];//sab false;
        int res = 0;
        
        for(int i = 0 ; i<V; i++){
            key[i] = INT_MAX;
            mstSet[i] = false;
        }
        
        key[0] = 0;
        parent[0] =-1;
        
        for(int count = 0; count < V-1; count++){
            int u = min_key(key, mstSet, V);
            mstSet[u] = true;
            
            
            for (auto it : adj[u]) {
                int v = it[0];
                int weight = it[1];
                if (mstSet[v] == false && weight < key[v]){
                    key[v] = weight;
                    parent[v] = u;
                }
            }
            // Calculate the weight of the MST

        }
        // Calculate the weight of the MST
        
        for (int i = 0; i < V; i++)
        {
            if (parent[i] != -1)
                res += key[i];
        }
        return res;
        
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
